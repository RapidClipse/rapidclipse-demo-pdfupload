
package com.company.rapidclipse.demo.pdfupload.ui;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

import com.vaadin.server.StreamResource;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Upload;
import com.vaadin.ui.Upload.Receiver;
import com.xdev.ui.XdevBrowserFrame;
import com.xdev.ui.XdevGridLayout;
import com.xdev.ui.XdevUpload;
import com.xdev.ui.XdevView;

public class MainView extends XdevView {

	ByteArrayOutputStream baos;

	/**
	 *
	 */
	public MainView() {
		super();
		this.initUI();

		/**
		 * Initialize a receiver on serverside, to wait and handle the upload content
		 */
		final Receiver receiver = new Receiver() {

		    @Override
		    public OutputStream receiveUpload(final String filename, final String mimeType) {
		    	/*
		    	 * Initialize the ByteArrayOutputStream
		    	 */
		    	MainView.this.baos = new ByteArrayOutputStream();

		    	/*
		    	 * Transport the content to the client
		    	 */
		    	MainView.this.browserPDFViewer.setSource(new StreamResource(new StreamResource.StreamSource() {

		    		  @Override
		    		  public InputStream getStream() {
		    		    return new ByteArrayInputStream(MainView.this.baos.toByteArray());
		    		  }
		    		/*
		    		 * The filename here is important because it is an indicator of the datatype in this example it
		    		 * should be an .pdf. If it is an datatype that can't not be handled by the browser it will instantly start
		    		 * a download otherwise it will be shown inside the browser.
		    		 */
		    		}, filename));

		    	/**
		    	 * Returns the content as OutputStream. In this example it is not really necessary
		    	 * because the handling of the content is directly implemented above. Otherwise you
		    	 * can use some of the listeners of the upload component to handle the content
		    	 * outside the receiver.
		    	 */
		    	return MainView.this.baos;
		    }
		};

		/**
		 * Add the receiver to the upload component
		 */
		this.uploadPDF.setReceiver(receiver);
	}

	/**
	 * Event handler delegate method for the {@link XdevUpload} {@link #uploadPDF}.
	 *
	 * @see Upload.SucceededListener#uploadSucceeded(Upload.SucceededEvent)
	 * @eventHandlerDelegate Do NOT delete, used by UI designer!
	 */
	private void uploadPDF_uploadSucceeded(final Upload.SucceededEvent event) {
		/**
		 * Just an example for uplaod listener usage
		 */
		Notification.show("Upload beendet");
	}

	/*
	 * WARNING: Do NOT edit!<br>The content of this method is always regenerated by
	 * the UI designer.
	 */
	// <generated-code name="initUI">
	private void initUI() {
		this.gridLayout = new XdevGridLayout();
		this.uploadPDF = new XdevUpload();
		this.browserPDFViewer = new XdevBrowserFrame();

		this.uploadPDF.setButtonCaption("Open PDF");
		this.uploadPDF.setImmediate(true);

		this.gridLayout.setColumns(1);
		this.gridLayout.setRows(2);
		this.uploadPDF.setSizeUndefined();
		this.gridLayout.addComponent(this.uploadPDF, 0, 0);
		this.browserPDFViewer.setSizeFull();
		this.gridLayout.addComponent(this.browserPDFViewer, 0, 1);
		this.gridLayout.setColumnExpandRatio(0, 10.0F);
		this.gridLayout.setRowExpandRatio(1, 10.0F);
		this.gridLayout.setSizeFull();
		this.setContent(this.gridLayout);
		this.setSizeFull();

		this.uploadPDF.addSucceededListener(event -> this.uploadPDF_uploadSucceeded(event));
	} // </generated-code>

	// <generated-code name="variables">
	private XdevUpload uploadPDF;
	private XdevBrowserFrame browserPDFViewer;
	private XdevGridLayout gridLayout;
	// </generated-code>

}
